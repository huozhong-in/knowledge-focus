name: 'Build and Release Tauri App'

on:
  workflow_dispatch:
  push:
    branches:
      - release
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v5

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './tauri-app/src-tauri -> target'

      - name: install frontend dependencies
        run: bun install
        working-directory: ./tauri-app

      - name: sync version to frontend
        working-directory: ./tauri-app
        run: |
          # 从 tauri.conf.json 提取版本号
          VERSION=$(grep '"version"' src-tauri/tauri.conf.json | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "检测到版本号: $VERSION"
          
          # 生成 version.ts 文件
          cat > src/version.ts << EOF
          // 应用版本配置 - 自动生成，请勿手动编辑
          export const APP_VERSION = "$VERSION";
          export const BUILD_DATE = "$(date -u +%Y-%m-%d)";
          export const BUILD_TIME = "$(date -u +%Y-%m-%dT%H:%M:%SZ)";
          // 版本信息对象
          export const VERSION_INFO = {
            version: APP_VERSION,
            buildDate: BUILD_DATE,
            buildTime: BUILD_TIME,
            environment: import.meta.env.MODE,
          } as const;
          EOF
          
          echo "版本号已同步到前端: $VERSION"

      - name: import Apple Developer Certificate
        # Prevents keychain from locking automatically for 3600 seconds.
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: verify certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."
      
        # 构建并发布版本（包含updater artifacts和latest.json）
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: ./tauri-app
          tauriScript: bun tauri
          tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: 'v__VERSION__'
          releaseBody: |
            ## 🚀 KnowledgeFocus v__VERSION__
            
            ### 📦 下载说明
            - **Intel Mac**: 下载 `KnowledgeFocus_x64.app.tar.gz`
            - **Apple Silicon Mac (M1/M2/M3)**: 下载 `KnowledgeFocus_aarch64.app.tar.gz`
            
            ### 🔄 自动更新
            应用内置自动更新功能，首次安装后会自动检查更新。
            
            ### 📋 更新内容
            - 请查看 commit 历史了解具体变更
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true # 自动生成latest.json
          args: ${{ matrix.args }}